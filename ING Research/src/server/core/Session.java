package server.core;

import java.util.HashSet;
import java.util.Iterator;

import accounts.BankAccount;
import accounts.CustomerAccount;
import accounts.DebitCard;

/**
 * A simple class which purpose is storing a UI session.
 * @author Justin Praas
 * @version 2nd of April, 2017
 */
public class Session {
	
	public String authToken;
	public CustomerAccount customerAccount;
	public HashSet<BankAccount> bankAccounts;
	public HashSet<DebitCard> debitCards;

	/**
	 * Creates a serverside Session for a logged in user.
	 * @param authToken The authToken generated by the server for this Session.
	 * @param account The CustomerAccount of the customer who has logged in for this Session.
	 */
	public Session(String authToken, CustomerAccount account) {
		this.authToken = authToken;
		customerAccount = account;
		
		bankAccounts = new HashSet<>();
		debitCards = new HashSet<>();
		
		Iterator<BankAccount> it = customerAccount.getBankAccounts().iterator();
		while (it.hasNext()) {
			BankAccount bankAccount = it.next();
			if (!bankAccount.getClosed()) {
				bankAccounts.add(bankAccount);
				addCards(bankAccount);
			}
		}
	}
	
	/**
	 * Adds all of a given BankAccount's DebitCards to the active DebitCard list for this Session.
	 * @param bankAccount The BankAccount whose DebitCards should be added to the active session.
	 */
	private void addCards(BankAccount bankAccount) {
		for (DebitCard card : bankAccount.getDebitCards()) {
			if (card.getHolderBSN().equals(customerAccount.getBSN())) {
				debitCards.add(card);
			}
		}
	}

	/**
	 * Reloads all the user's bank accounts and debit cards from persistent memory.
	 */
	public void refresh() {
		if (customerAccount == null) {
			return;
		}
		
		bankAccounts = new HashSet<>();
		debitCards = new HashSet<>();
		
		Iterator<BankAccount> it = customerAccount.getBankAccounts().iterator();
		while (it.hasNext()) {
			BankAccount bankAccount = it.next();
			if (!bankAccount.getClosed()) {
				bankAccounts.add(bankAccount);
			}
		}
	}
}
